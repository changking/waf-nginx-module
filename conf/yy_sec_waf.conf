#yysec_waf_rule v2.1
#yy_sec_waf off;

#conn_processor off;

#http_method GET POST;

#max_post_args_len 2048;

#denied_url "/redirect";

#####
#whitlist rule IDs:2000-2099
#####
#geo $ip_whitelist {
#  default 0;
#  127.0.0.1 1;
#}

#basic_rule $ip_whitelist eq:1 phase:1 id:2001 msg:"whitelist rule" gids:XSS lev:LOG|ALLOW;
basic_rule $uri regex:\.(bmp|gif|jpg|jpeg|png|tif|css|js|ico|swf|pdf|doc)$ phase:1 id:2002 "msg:whitelis rule" gids:XSS lev:ALLOW;
 
#####
#xss attack IDs:1000-1099
#basic security.
#####
#deal tag
basic_rule ARGS regex:<(?:s(?:cript|tyle)|i(?:frame|n(?:put|s))|f(?:rame(?:set)?|orm)|a(?:pplet|ddress|rea)|b(?:ase|gsound|ody)|l(?:ayer|ink)|meta|object|textarea|embed)[^>]*> phase:2 id:1001 msg:test gids:XSS lev:LOG;
	
#deal event and css style
basic_rule ARGS regex:[\s`'"](on(?:abort|blur|c(?:hange|lick)|d(?:blclick|ragdrop)|error|focus|key(?:down|press|up)|load|m(?:ouse(?:down|move|o(?:ut|ver)|up)|ove)|re(?:adystatechange|s(?:et|ize))|s(?:elect|ubmit)|unload)\s*?=|style\s*?=[^:]*?:\s*?(?:url|expression)) phase:2 id:1002 msg:test gids:XSS lev:LOG;

#deal javascript/vbscript/data:text/html
basic_rule ARGS "regex:[jvd&](#x[4567][46a];)?((b|&#x[46]2;)(s|&#x[57]3;)(c|&#x[46]3;)(r|&#x[57]2;)(i|&#x[46]9;)(p|&#x[57]0;)(t|&#x[57]4;)(:|&#x3a;)|(a|&#x[46]1;)((v|&#x[57]6;)(a|&#x[46]1;)(s|&#x[57]3;)(c|&#x[46]3;)(r|&#x[57]2;)(i|&#x[46]9;)(p|&#x[57]0;)(t|&#x[57]4;)(:|&#x3a;)|(t|&#x[57]4;)(a|&#x[46]1;)(:|&#x3a;)(t|&#x[57]4;)(e|&#x[46]5;)(x|&#x[57]8;)(t|&#x[57]4;)(/|&#x2f;)(h|&#x[46]8;)(t|&#x[57]4;)(m|&#x[46]d;)(l|&#x[46]c;)))" phase:2 id:1004 msg:test gids:xss lev:LOG;
#basic_rule ARGS regex:\b(javascript:|vbscript:|data:text/html) id:1004 msg:test gids:xss lev:LOG;

#deal %00. high security.
#basic_rule id:1007 regex:\x00 msg:test pos:ARGS gids:XSS lev:LOG;

#deal injection of javascript, and function of  event.
basic_rule ARGS "regex:[\"']\s*?(?:(?:/\*.*?\*/)?\s*[;/%\+\-\*].+(?:\"|'|//|/\*|<!--)|;[^\(/<]*?(?:\(\s+['\"]|//|<!--|/\*))" phase:2 id:1008 msg:test gids:XSS lev:LOG;

#deal flash scirpt. high security
#basic_rule ARGS regex:\ballowScriptAccess[\s]*?=[\s]*?always id:1009 msg:test gids:XSS lev:LOG;

##################
#command injection IDs:1100-1199
#basic security.
##################
basic_rule ARGS "regex:[;\|`&][\s&`;\|]*(c(h(grp|mod|own|sh)|url|pp|c|d|at)|p(asswd|ython|erl|ing|s)|n(asm|et|map|c)|f(inger|tp)|t(elnet|raceroute|clsh8?|ftp)|g(cc|\+\+)|kill|mail|(xte)?rm|ls(of)?|echo|uname|wget|s(h|leep)|/bin/)\b" phase:2 id:1101 msg:test gids:command lev:LOG;

##################
# file upload IDs:1200-1299
# basic security
##################
basic_rule MULTIPART_FILENAME "regex:\.jsp|\.php|\.html|\.htm|\.\./" "msg:uncommon filename" phase:2 id:1201 gids:UPLOAD  lev:LOG;

basic_rule PROCESS_BODY_ERROR "eq:1" "msg:process body error" phase:2 id:1202 gids:UPLOAD lev:LOG;


#############
#hash colision
############
basic_rule POST_ARGS_COUNT "gt:200" "msg:too many post args" phase:2 id:1205 gids:UPLOAD lev:LOG;

#################
#sql injection IDs:1300-1399
#basic security.
#################
basic_rule ARGS "regex:\b\d(x[0-9a-f]+|[0-9]*)\s+(and|or|&&|\|\|)(\s+((0x)?[0-9]+|['\"][^'\"&]{1,15}['\"]\s*[=><])|['\"][^'\"&]{1,15}['\"]\s*?[=><])" phase:2 id:1301 msg:test gids:SQL lev:LOG;

basic_rule ARGS regex:['"]\s+(and|or|&&|\|\|)\s*?(['"][^'"&]*['"]\s*[=><]\s*['"]|(0x[0-9a-f]+|[0-9]+)[^\#-&]*(\#|--)) phase:2 id:1302 msg:testgids:SQL lev:LOG;

basic_rule ARGS "regex:\b(ascii\s*\(|benchmark\s*\(|c(har\s*\(|oncat\s*\(|ase\s+when\b|urrent_user\b)|database\s*\(|group(_concat\s*\(|\s+by\b)|l(ength|oad_file)\s*\(|mysql\s*\.\s*(user|db|tables_priv|columns_priv)\b|order\s+by\b|version\s*\(|s(elect\b.{1,50}\bfrom\b|ystem_user\s*\(|ubstr(ing)?\s*\(|leep\s*\()|u(ser\s*\(|nion.{1,20}select\b)|i(f\s*\(|n(to\s+(outfile|dumpfile)\b|(formation_schema\s*\.))))" phase:2 id:1308 msg:test gids:SQL lev:LOG;

basic_rule ARGS "regex:[@/](@(version|datadir)|\*.{0,50}\*/)" phase:2 id:1309 msg:test gids:SQL lev:LOG;

basic_rule ARGS regex:\b(insert\s*into\b.*\bvalues|update\s+\w+\s+set|delete\s+from|CREATE\s+(DATABASE|TABLE)|DROP\s+(DATABASE|TABLE))\b phase:2 id:1310 msg:test gids:SQL lev:LOG;

############
#connection static
############
basic_rule CONN_PER_IP "gt:100" "msg:too many connections" phase:1 id:1311 gids:UPLOAD lev:LOG;


################
##header injection from:1400-1499
#################
#
#########
##cookie for xss injection:1401-1409.  high security
#########
##deal tag
#basic_rule $http_cookie regex:<(?:s(?:cript|tyle)|i(?:frame|n(?:put|s))|f(?:rame(?:set)?|orm)|a(?:pplet|ddress|rea)|b(?:ase|gsound|ody)|l(?:ayer|ink)|meta|object|textarea|embed)[^>]*> t:urldecode phase:1 id:1401 msg:test gids:Header-Injection lev:LOG;

##deal event and css style
#basic_rule $http_cookie "regex:[\s`'\"](on(?:abort|blur|c(?:hange|lick)|d(?:blclick|ragdrop)|error|focus|key(?:down|press|up)|load|m(?:ouse(?:down|move|o(?:ut|ver)|up)|ove)|re(?:adystatechange|s(?:et|ize))|s(?:elect|ubmit)|unload)\s*?=|style\s*?=[^:]*?:\s*?(?:url|expression))" t:urldecode phase:1 id:1402 msg:test gids:Header-Injection lev:LOG;

##deal javascript/vbscript/data:text/html
#basic_rule $http_cookie "regex:[jvd&](#x[4567][46a];)?((b|&#x[46]2;)(s|&#x[57]3;)(c|&#x[46]3;)(r|&#x[57]2;)(i|&#x[46]9;)(p|&#x[57]0;)(t|&#x[57]4;)(:|&#x3a;)|(a|&#x[46]1;)((v|&#x[57]6;)(a|&#x[46]1;)(s|&#x[57]3;)(c|&#x[46]3;)(r|&#x[57]2;)(i|&#x[46]9;)(p|&#x[57]0;)(t|&#x[57]4;)(:|&#x3a;)|(t|&#x[57]4;)(a|&#x[46]1;)(:|&#x3a;)(t|&#x[57]4;)(e|&#x[46]5;)(x|&#x[57]8;)(t|&#x[57]4;)(/|&#x2f;)(h|&#x[46]8;)(t|&#x[57]4;)(m|&#x[46]d;)(l|&#x[46]c;)))" phase:1 id:1403 msg:test gids:Header-Injection lev:LOG;

##deal injection of javascript, and function of  event.
#basic_rule $http_cookie "regex:[\"']\s*?(?:(?:/\*.*?\*/)?\s*[;/%\+\-\*].+(?:\"|'|//|/\*|<!--)|;[^\(/<]*?(?:\(\s+['\"]|//|<!--|/\*))" phase:1 id:1404 msg:test gids:Header-Injection lev:LOG;

#########
##cookie for sql injection IDs:1410-1419.  high security
#########
#basic_rule $http_cookie "regex:\b\d(x[0-9a-f]+|[0-9]*)\s+(and|or|&&|\|\|)(\s+((0x)?[0-9]+|['\"][^'\"&]{1,15}['\"]\s*[=><])|['\"][^'\"&]{1,15}['\"]\s*?[=><])" phase:1 id:1411 msg:test gids:Header-sql-ijection lev:LOG;

#basic_rule $http_cookie regex:['"]\s+(and|or|&&|\|\|)\s*?(['"][^'"&]*['"]\s*[=><]\s*['"]|(0x[0-9a-f]+|[0-9]+)[^\#-&]*(\#|--)) phase:1 id:1412 msg:test gids:Header-sql-Injection lev:LOG;

#basic_rule $http_cookie "regex:\b(ascii\s*\(|benchmark\s*\(|c(har\s*\(|oncat\s*\(|ase\s+when\b|urrent_user\b)|database\s*\(|group(_concat\s*\(|\s+by\b)|l(ength|oad_file)\s*\(|mysql\s*\.\s*(user|db|tables_priv|columns_priv)\b|order\s+by\b|version\s*\(|s(elect\b.{1,50}\bfrom\b|ystem_user\s*\(|ubstr(ing)?\s*\(|leep\s*\()|u(ser\s*\(|nion.{1,20}select\b)|i(f\s*\(|n(to\s+(outfile|dumpfile)\b|(formation_schema\s*\.))))" phase:1 id:1413 msg:test gids:Header-sql-Injection lev:LOG;

#basic_rule $http_cookie "regex:[@/](@(version|datadir)|\*.{0,50}\*/)" phase:1 id:1414 msg:test gids:Header-sql-Injection lev:LOG;

#basic_rule $http_cookie regex:\b(insert\s*into\b.*\bvalues|update\s+\w+\s+set|delete\s+from|CREATE\s+(DATABASE|TABLE)|DROP\s+(DATABASE|TABLE))\b phase:1 id:1415 msg:test gids:Header-Injection lev:LOG;

########
##cookie for command injection IDs:1420-1429 high security
########
#basic_rule $http_cookie "regex:[;\|`&][\s&`;\|]*(?:c(?:h(?:grp|mod|own|sh)|url|pp|c|d|at)|p(?:asswd|ython|erl|ing|s)|n(?:asm|et|map|c)|f(?:inger|tp)|t(?:elnet|raceroute|clsh8?|ftp)|g(?:cc|\+\+)|kill|mail|(?:xte)?rm|ls(?:of)?|echo|uname|wget|s(h|leep)|/bin/)\b" phase:1 id:1421 msg:test gids:Header-cmd-injection lev:LOG;

########
##args for header injection. 1430-1439¡£ middle security.
########
basic_rule ARGS "regex:\x0d\x0a(Set-Cookie|HTTP/\d\.\d\s+[1-5]\d\d)" phase:1 id:1430 msg:test gids:Header-Injection lev:LOG;


########
##ipaddress for injection. 1440-1449. high security.
########
##remote_addr, if no match, alert. 
##But, you can't used tis rule, if the http request did not has remote_addr header or the value of remote_addr is empty.
basic_rule $http_client_ip "!regex:^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$" phase:1 id:1440 msg:test gids:Header-Injection lev:LOG;

##x_forwarded_for, only applyed to first ip address. if no match, alert.
##But, you can't used tis rule, if the http request did not has x_forwarded_for header or the value of x_forwarded_for is empty.
basic_rule $http_x_forwarded_for "!regex:^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(\s*,\s*\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})*$" phase:1 id:1441 msg:test gids:Header-Injection lev:LOG;

###################
#source code disclosure. 1500-1599
##################
basic_rule $uri "regex:\.svn"  phase:1 id:1501 msg:svn_soure_code_disclosure gids:SourceCode_Disclosure lev:LOG;
